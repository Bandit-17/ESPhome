substitutions:
  updates: 2s
  name: person_detection

esp32:
  board: esp32dev
  framework:
    type: arduino
    version: 2.0.6   #2.0.5
    platform_version: 5.3.0 #5.2.0
 
esphome:
  name: ${name}
  on_boot:
    priority: -100
    then:
      - delay: 5s 
      - lambda: |-
          uint8_t value;
          esphome::sen21231::SEN21231Component *sen =  id(${name}_person);
          value = sen->get_mode_register();
          if (value==0) {
             id(${name}_mode_register).publish_state(false); 
          }
          else{
            id(${name}_mode_register).publish_state(true); 
          }

      - lambda: |-
          uint8_t value;
          esphome::sen21231::SEN21231Component *sen =  id(${name}_person);
          value = sen->get_enableid_register();
          if (value==0) {
             id(${name}_enableid_register).publish_state(false); 
          }
          else{
            id(${name}_enableid_register).publish_state(true); 
          } 

      - lambda: |-
          uint8_t value;
          esphome::sen21231::SEN21231Component *sen =  id(${name}_person);
          value = sen->get_labelnext_register();
          id(${name}_labelnext_register_number).publish_state(value); 
                 

      - lambda: |-
          uint8_t value;
          esphome::sen21231::SEN21231Component *sen =  id(${name}_person);
          value = sen->get_persistid_register();
          if (value==0) {
             id(${name}_persistid_register).publish_state(false); 
          }
          else{
            id(${name}_persistid_register).publish_state(true); 
          }

      - lambda: |-
          uint8_t value;
          esphome::sen21231::SEN21231Component *sen =  id(${name}_person);
          value = sen->get_debug_register();
          if (value==0) {
             id(${name}_debug_register).publish_state(false); 
          }
          else{
            id(${name}_debug_register).publish_state(true); 
          }    

# external_components:
#   - source: my_components
#     components: [sen21231]
#     refresh: 0s 

external_components:
  
  - source: github://SeByDocKy/ESPhome/
    components: [ sen21231 ]
    refresh: 0s

logger:
  #level: verbose
  baud_rate: 0

# Enable Home Assistant API
api:

ota:
 
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Person Fallback Hotspot"
    password: "sebydocky"   

i2c:
- sda: GPIO22
  scl: GPIO21
  id: i2c_bus
  scan: true

button:

  - platform: template
    name: ${name}_eraseid_register_button
    id: ${name}_eraseid_register_button
    on_press:
      then:
        - lambda: |-
            esphome::sen21231::SEN21231Component *sen =  id(${name}_person);
            sen->write_eraseid_register(uint8_t( 1 ));
            sen->set_eraseid_register(uint8_t( 1 ));

        - delay: 0.1s

        - lambda: |-
            esphome::sen21231::SEN21231Component *sen =  id(${name}_person);
            sen->write_eraseid_register(uint8_t( 0 ));
            sen->set_eraseid_register(uint8_t( 0 ));

  - platform: template
    name: ${name}_singleshot_register_button
    id: ${name}_singleshot_register_button
    on_press:
      then:
        - lambda: |-
            esphome::sen21231::SEN21231Component *sen =  id(${name}_person);
            sen->write_singleshot_register(uint8_t( 1 ));
            sen->set_singleshot_register(uint8_t( 1 ));

        - delay: 0.1s

        - lambda: |-
            esphome::sen21231::SEN21231Component *sen =  id(${name}_person);
            sen->write_singleshot_register(uint8_t( 0 ));
            sen->set_singleshot_register(uint8_t( 0 ));          

number:

  # - platform: template
  #   name: ${name}_mode_register_number
  #   id: ${name}_mode_register_number
  #   optimistic: true
  #   icon: mdi:numeric
  #   min_value: 0
  #   max_value: 1
  #   step:  1
  #   initial_value: 1
  #   restore_value: true
  #   mode: 'slider'
  #   on_value:
  #     then:
  #       - lambda: |-
  #           esphome::sen21231::SEN21231Component *sen =  id(${name}_person);
  #           sen->write_mode_register(uint8_t( id(${name}_mode_register_number ).state ));
  #           sen->set_mode_register(uint8_t( id(${name}_mode_register_number ).state ));

  # - platform: template
  #   name: ${name}_enableid_register_number
  #   id: ${name}_enableid_register_number
  #   optimistic: true
  #   icon: mdi:numeric
  #   min_value: 0
  #   max_value: 1
  #   step:  1
  #   initial_value: 0
  #   restore_value: true
  #   mode: 'slider'
  #   on_value:
  #     then:
  #       - lambda: |-
  #           esphome::sen21231::SEN21231Component *sen =  id(${name}_person);
  #           sen->write_enableid_register(uint8_t( id(${name}_enableid_register_number ).state ));
  #           sen->set_enableid_register(uint8_t( id(${name}_enableid_register_number ).state ));


  - platform: template
    name: ${name}_labelnext_register_number
    id: ${name}_labelnext_register_number
    optimistic: true
    icon: mdi:numeric
    min_value: 0
    max_value: 7
    step:  1
    initial_value: 0
    restore_value: true
    mode: 'slider'
    on_value:
      then:
        - lambda: |-
            esphome::sen21231::SEN21231Component *sen =  id(${name}_person);
            sen->write_labelnext_register(uint8_t( id(${name}_labelnext_register_number ).state ));
            sen->set_labelnext_register(uint8_t( id(${name}_labelnext_register_number ).state ));

  # - platform: template
  #   name: ${name}_persistid_register_number
  #   id: ${name}_persistid_register_number
  #   optimistic: true
  #   icon: mdi:numeric
  #   min_value: 0
  #   max_value: 1
  #   step:  1
  #   initial_value: 0
  #   restore_value: true
  #   mode: 'slider'
  #   on_value:
  #     then:
  #       - lambda: |-
  #           esphome::sen21231::SEN21231Component *sen =  id(${name}_person);
  #           sen->write_persistid_register(uint8_t( id(${name}_persistid_register_number ).state ));
  #           sen->set_persistid_register(uint8_t( id(${name}_persistid_register_number ).state ));                   



  # - platform: template
  #   name: ${name}_debug_register_number
  #   id: ${name}_debug_register_number
  #   optimistic: true
  #   icon: mdi:numeric
  #   min_value: 0
  #   max_value: 1
  #   step:  1
  #   initial_value: 1
  #   restore_value: true
  #   mode: 'slider'
  #   on_value:
  #     then:
  #       - lambda: |-
  #           esphome::sen21231::SEN21231Component *sen =  id(${name}_person);
  #           sen->write_debug_register(uint8_t( id(${name}_debug_register_number ).state ));
  #           sen->set_debug_register(uint8_t( id(${name}_debug_register_number ).state ));

switch:
  - platform: restart
    name: restart_${name}

  - platform: template
    name: ${name}_mode_register
    id: ${name}_mode_register
    optimistic: true
    on_turn_on:
      then:
        - lambda: |-
            esphome::sen21231::SEN21231Component *sen =  id(${name}_person);
            sen->write_mode_register(uint8_t(1));
            sen->set_mode_register(uint8_t( 1));
    on_turn_off:
      then:
        - lambda: |-
            esphome::sen21231::SEN21231Component *sen =  id(${name}_person);
            sen->write_mode_register(uint8_t(0));
            sen->set_mode_register(uint8_t( 0));

  - platform: template
    name: ${name}_enableid_register
    id: ${name}_enableid_register
    optimistic: true 
    on_turn_on:
      then:
        - lambda: |-
            esphome::sen21231::SEN21231Component *sen =  id(${name}_person);
            sen->write_enableid_register(uint8_t(1));
            sen->set_enableid_register(uint8_t( 1));
    on_turn_off:
      then:
        - lambda: |-
            esphome::sen21231::SEN21231Component *sen =  id(${name}_person);
            sen->write_enableid_register(uint8_t(0));
            sen->set_enableid_register(uint8_t( 0));           
            
  - platform: template
    name: ${name}_persistid_register
    id: ${name}_persistid_register
    optimistic: true 
    on_turn_on:
      then:
        - lambda: |-
            esphome::sen21231::SEN21231Component *sen =  id(${name}_person);
            sen->write_persistid_register(uint8_t(1));
            sen->set_persistid_register(uint8_t( 1));
    on_turn_off:
      then:
        - lambda: |-
            esphome::sen21231::SEN21231Component *sen =  id(${name}_person);
            sen->write_persistid_register(uint8_t(0));
            sen->set_persistid_register(uint8_t( 0));            

  - platform: template
    name: ${name}_debug_register
    id: ${name}_debug_register
    optimistic: true 
    on_turn_on:
      then:
        - lambda: |-
            esphome::sen21231::SEN21231Component *sen =  id(${name}_person);
            sen->write_debug_register(uint8_t( 1 ));
            sen->set_debug_register(uint8_t( 1 ));
    on_turn_off:
      then:
        - lambda: |-
            esphome::sen21231::SEN21231Component *sen =  id(${name}_person);
            sen->write_debug_register(uint8_t( 0 ));
            sen->set_debug_register(uint8_t( 0 ));       
      
sensor:
  - platform: sen21231
    id: ${name}_person
    nfaces:
      name: ${name}_nfaces

    ###### First face detected #####  
    
    boxconf0:
      name: ${name}_boxconf0
    x0:
      name: ${name}_x0 
    y0:
      name: ${name}_y0
    w0:
      name: ${name}_w0
    h0:
      name: ${name}_h0
    idconf0:
      name: ${name}_idconf0
    id0:
      name: ${name}_id0
    isfacing0:
      name: ${name}_isfacing0
    mode: 1           #### 0 = Standby  / 1 = Continuous  (default)
    enableid: 1       #### 0 = disable id (default)  / 1 = enable if
    singleshot: 0     #### 0 = no single shot (default)  / 1 = single shot
    labelnext: 0      ##### label id = {0,1,2,3,4,5,6,7}  (0 = default) ####
    persistid: 1      #### 0 = no persistent id after power off   / 1 = persistent id after power off (default)
    eraseid: 0        #### 0 = no eraseid (default)   / 1 = erase id
    debug: 0          #### 0 = no debug = no green light   / 1 = debug = green light activity with detection (default)

    update_interval: ${updates}
    address: 0x62

  # - platform: template
  #   id: ${name}_read_mode_register
  #   name: ${name}_read_mode_register
  #   accuracy_decimals: 0
  #   update_interval: 1s
  #   lambda: |-
  #     uint8_t value;
  #     esphome::sen21231::SEN21231Component *sen =  id(${name}_person);
  #     value = sen->read_mode_register();
  #     return value;

    