####################################### e-2-nomy video #58: https://www.youtube.com/watch?v=Vf6Rjg_4oJM  ###########


##### https://www.youtube.com/watch?v=Vf6Rjg_4oJM&t=219s

substitutions:
  updates: 5s
  name: tracer_6420an

esphome:
  name: ${name}
#  platformio_options:
#    build_flags: 
#      - -DCONFIG_ARDUINO_LOOP_STACK_SIZE=32768 #16384 #8192 #16384 # #  
#    platform_packages:
#      - framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git#2.0.2
#    platform:
#      - https://github.com/platformio/platform-espressif32.git#feature/arduino-upstream  

esp32:
  board: esp32dev
  framework:
    type: arduino
    version: 2.0.3
    platform_version: 4.4.0 
    
time:
  - platform: sntp
    id: sntp_time   
    timezone: "CET-1CEST-2,M3.5.0/02:00:00,M10.5.0/03:00:00" #https://sites.google.com/a/usapiens.com/opnode/time-zones
    servers: "de.pool.ntp.org"

    on_time:
    - seconds: 59
      minutes: 59
      hours: 23
      then:  

        - globals.set:
                id: pv_power_total_veille_global
                value: !lambda return ( id(pv_power_total_veille_global) =  float( id(pv_power_total_du_jour).state) );         
                
        - globals.set:
                id: charging_power_total_veille_global
                value: !lambda return ( id(charging_power_total_veille_global) =  float( id(charging_power_total_du_jour).state) );        
     

logger:
  #level: INFO
#  level: very_verbose
  baud_rate: 0
   

# Enable Home Assistant API
api:
  reboot_timeout: 0s

ota:
  password: "e24f57bcac31a2b3eca8da4c217185fc"

wifi:
  ssid: !secret esphome_ssid
  password: !secret esphome_password
  power_save_mode: high
  output_power: 8.5db

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "tracer_6420AN Fallback Hotspot"
    password: "sebydocky"
    
uart:
  id: mod_bus
  tx_pin: 18
  rx_pin: 19
  baud_rate: 115200
  stop_bits: 1
  # debug:
    # direction: BOTH  
 
modbus:
  #flow_control_pin: 23
  send_wait_time: 200ms
  id: mod_bus_epever

modbus_controller:
  - id: epever
    ## the Modbus device addr
    address: 0x1
    modbus_id: mod_bus_epever
    command_throttle: 200ms
    setup_priority: -10
    update_interval: ${updates} 
    
globals:    
  - id: pv_power_total_veille_global
    type: float
    restore_value: yes
    
  - id: charging_power_total_veille_global
    type: float
    restore_value: yes    
    
select:
  - platform: modbus_controller
    name: ${name}_battery_type_select
    address: 0x9000
    value_type: U_WORD
    icon: mdi:car-battery
    optionsmap:
      "Libattery": 0
      "Sealed": 1
      "Gel": 2
      "Flooded": 3

  - platform: modbus_controller
    name: ${name}_rated_voltage_level_select
    address: 0x9067
    value_type: U_WORD
    icon: mdi:car-battery
    optionsmap:
      "Self-recognition": 0
      "12V": 1
      "24V": 2
      "36V": 3
      "48V": 4       
                                          
number:

  - platform: modbus_controller
    id: battery_capacity_number
    name: ${name}_battery_cap_number
    address: 0x9001
    value_type: U_WORD
    unit_of_measurement: 'Ah'
    icon: mdi:car-battery
    min_value: 50
    max_value: 1000
    step:  10
    mode: 'slider'
    
  - platform: modbus_controller
    id: equalization_duration_number
    name: ${name}_equalization_duration_number
    address: 0x906B
    value_type: U_WORD
    unit_of_measurement: 'min'
    icon: mdi:timer-sand
    min_value: 0
    max_value: 180
    step:  10
    mode: 'slider'

  - platform: modbus_controller
    id: boost_duration_number
    name: ${name}_boost_duration_number
    address: 0x906C
    value_type: U_WORD
    unit_of_measurement: 'min'
    icon: mdi:timer-sand
    min_value: 10
    max_value: 180
    step:  10
    mode: 'slider'     
      
    
  - platform: modbus_controller
    id: temperature_compensation_coefficient_number
    name: ${name}_temperature_compensation_coefficient_number
    address: 0x9002
    value_type: U_WORD
    unit_of_measurement: "mV/Â°C/2V"
    icon: mdi:thermometer
    min_value: -10
    max_value: 0
    step:  1
    multiply: -100
    mode: 'slider'    
    
  # - platform: modbus_controller
    # id: high_voltage_disconnect_number
    # name: ${name}_high_voltage_disconnect_number
    # address: 0x9003
    # value_type: U_WORD
    # unit_of_measurement: "V"
    # icon: mdi:thermometer
    # min_value: 56.40
    # max_value: 58.60
    # step:  0.1
    # multiply: 100
# #    initial_value: 0
# #    restore_value: true
    # mode: 'slider'  

  - platform: template
    id: high_voltage_disconnect_number
    name: ${name}_high_voltage_disconnect_number
    unit_of_measurement: "V"
    icon: mdi:sine-wave
    optimistic: true
    min_value: 56.40
    max_value: 58.60
    step:  0.1
    initial_value: 58.40
    restore_value: true
    mode: 'slider'
    on_value:
      then:       
        - script.execute: write_9003_900E_registers
        
  - platform: template
    id: charging_limit_voltage_number
    name: ${name}_charging_limit_voltage_number
    unit_of_measurement: "V"
    icon: mdi:sine-wave
    optimistic: true
    min_value: 56.40
    max_value: 58.60
    step:  0.1
    initial_value: 58.00
    restore_value: true
    mode: 'slider'
    on_value:
      then:       
        - script.execute: write_9003_900E_registers

  - platform: template
    id: over_voltage_reconnect_number
    name: ${name}_over_voltage_reconnect_number
    unit_of_measurement: "V"
    icon: mdi:sine-wave
    optimistic: true
    min_value: 55.00
    max_value: 58.00
    step:  0.1
    initial_value: 56.20
    restore_value: true
    mode: 'slider'
    on_value:
      then:       
        - script.execute: write_9003_900E_registers

  - platform: template
    id: equalization_voltage_number
    name: ${name}_equalization_voltage_number
    unit_of_measurement: "V"
    icon: mdi:sine-wave
    optimistic: true
    min_value: 54.00
    max_value: 58.60
    step:  0.1
    initial_value: 55.80
    restore_value: true
    mode: 'slider'
    on_value:
      then:       
        - script.execute: write_9003_900E_registers        
         
    
  - platform: template
    id: boost_voltage_number
    name: ${name}_boost_voltage_number
    unit_of_measurement: 'V'
    optimistic: true
    icon: mdi:sine-wave
    min_value: 54.00
    max_value: 58.60
    step: 0.10
    initial_value: 55.80
    restore_value: true
    mode: 'slider'
    on_value:
      then:       
        - script.execute: write_9003_900E_registers    
    
  - platform: template
    id: float_voltage_number
    name: ${name}_float_voltage_number
    unit_of_measurement: 'V'
    optimistic: true
    icon: mdi:sine-wave
    min_value: 52.00
    max_value: 57.00
    step: 0.10
    initial_value: 54.00
    restore_value: true
    mode: 'slider'
    on_value:
      then:       
        - script.execute: write_9003_900E_registers    


  - platform: template
    id: boost_reconnect_voltage_number
    name: ${name}_boost_reconnect_voltage_number
    unit_of_measurement: 'V'
    optimistic: true
    icon: mdi:sine-wave
    min_value: 52.00
    max_value: 56.00
    step: 0.1
    initial_value: 53.80
    restore_value: true
    mode: 'slider'
    on_value:
      then:       
        - script.execute: write_9003_900E_registers

  - platform: template
    id: low_voltage_reconnect_number
    name: ${name}_low_voltage_reconnect_number
    unit_of_measurement: 'V'
    optimistic: true
    icon: mdi:sine-wave
    min_value: 48.00
    max_value: 53.00
    step: 0.1
    initial_value: 50.40
    restore_value: true
    mode: 'slider'
    on_value:
      then:       
        - script.execute: write_9003_900E_registers

  - platform: template
    id: under_voltage_recover_number
    name: ${name}_under_voltage_recover_number
    unit_of_measurement: 'V'
    optimistic: true
    icon: mdi:sine-wave
    min_value: 48.00
    max_value: 53.00
    step: 0.1
    initial_value: 48.80
    restore_value: true
    mode: 'slider'
    on_value:
      then:       
        - script.execute: write_9003_900E_registers

  - platform: template
    id: under_voltage_warning_number
    name: ${name}_under_voltage_warning_number
    unit_of_measurement: 'V'
    optimistic: true
    icon: mdi:sine-wave
    min_value: 46.00
    max_value: 50.00
    step: 0.1
    initial_value: 48.00
    restore_value: true
    mode: 'slider'
    on_value:
      then:       
        - script.execute: write_9003_900E_registers
        
  - platform: template
    id: low_voltage_disconnect_number
    name: ${name}_low_voltage_disconnect_number
    unit_of_measurement: 'V'
    optimistic: true
    icon: mdi:sine-wave
    min_value: 44.00
    max_value: 50.00
    step: 0.1
    initial_value: 46.40
    restore_value: true
    mode: 'slider'
    on_value:
      then:       
        - script.execute: write_9003_900E_registers        

  - platform: template
    id: discharging_limit_voltage_number
    name: ${name}_discharging_limit_voltage_number
    unit_of_measurement: 'V'
    optimistic: true
    icon: mdi:sine-wave
    min_value: 44.00
    max_value: 50.00
    step: 0.1
    initial_value: 46.00
    restore_value: true
    mode: 'slider'
    on_value:
      then:       
        - script.execute: write_9003_900E_registers        

   
binary_sensor:       
  - platform: status
    name: ${name}__status   
   
sensor:
  - platform: uptime
    id: uptime_sec  

  - platform: modbus_controller
    modbus_controller_id: epever
    id: pv_input_voltage
    name: ${name}_pv_array_input_voltage
    address: 0x3100
    unit_of_measurement: "V" ## for any other unit the value is returned in minutes
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    icon: mdi:sine-wave
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: pv_input_current
    name: ${name}_pv_array_input_current
    address: 0x3101
    unit_of_measurement: "A" ## for any other unit the value is returned in minutes
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    icon: mdi:current-dc
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: pv_input_power
    name: ${name}_pv_array_input_power
    address: 0x3102
    unit_of_measurement: "W" ## for any other unit the value is returned in minutes
    register_type: read
    value_type: U_DWORD_R
    accuracy_decimals: 1
    icon: mdi:power
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: charging_voltage
    name: ${name}_charging_voltage
    address: 0x3104
    unit_of_measurement: "V"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    icon: mdi:sine-wave
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: charging_current
    name: ${name}_charging_current
    address: 0x3105
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    icon: mdi:current-dc
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: charging_power
    name: ${name}_charging_power
    address: 0x3106
    unit_of_measurement: "W"
    register_type: read
    value_type: U_DWORD_R
    accuracy_decimals: 1
    icon: mdi:power
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: load_voltage
    name: ${name}_load_voltage
    address: 0x310C
    unit_of_measurement: "V"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    icon: mdi:sine-wave
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: load_current
    name: ${name}_load_current
    address: 0x310D
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    icon: mdi:current-dc
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: load_power
    name: ${name}_load_power
    address: 0x310E
    unit_of_measurement: "W"
    register_type: read
    value_type: U_DWORD_R
    accuracy_decimals: 1
    icon: mdi:power
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: battery_temperature
    name: ${name}_battery_temperature
    address: 0x3110
    unit_of_measurement: "Â°C"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    icon: mdi:thermometer
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: device_temperature
    name: ${name}_device_temperature
    address: 0x3111
    unit_of_measurement: "Â°C"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    icon: mdi:thermometer
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: power_components_temperature
    name: ${name}_power_components_temperature
    address: 0x3112
    unit_of_measurement: "Â°C"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    icon: mdi:thermometer
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: battery_soc
    name: ${name}_battery_soc
    address: 0x311A
    unit_of_measurement: "%"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 0
    icon: mdi:percent

  - platform: modbus_controller
    modbus_controller_id: epever
    id: remote_battery_temperature
    name: ${name}_remote_battery_temperature
    address: 0x311B
    unit_of_measurement: "Â°C"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    icon: mdi:thermometer
    filters:
      - multiply: 0.01
      
  - platform: modbus_controller
    modbus_controller_id: epever
    id: rated_charging_current
    name: ${name}_rated_charging_current
    address: 0x3005
    unit_of_measurement: "A"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 0
    icon: mdi:current-dc
    filters:
      - multiply: 0.01     
      
  - platform: modbus_controller
    modbus_controller_id: epever
    id: battery_volt_settings
    name: ${name}_remote_real_voltage
    address: 0x311D
    unit_of_measurement: "V"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    icon: mdi:sine-wave
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: Battery_status_volt
    name: ${name}_battery_status_voltage
    address: 0x3200
    register_type: read
    value_type: U_WORD
    bitmask: 0x7  #(Bits 0-3)
    accuracy_decimals: 0

  - platform: modbus_controller
    modbus_controller_id: epever
    id: Battery_status_temp
    name: ${name}_battery_status_temperature
    address: 0x3200
    register_type: read
    value_type: U_WORD
    bitmask: 0x38  #(Bits 4-7)
    accuracy_decimals: 0

  - platform: modbus_controller
    modbus_controller_id: epever
    id: charger_status
    name: ${name}_charger_status
    address: 0x3201
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 0

  - platform: template
    accuracy_decimals: 0
    name: ${name}_generated_charge_today
    id: generated_charge_today
    unit_of_measurement: "Ah"
  
  - platform: modbus_controller
    modbus_controller_id: epever
    id: battery_type
    address: 0x9000
    name: ${name}_battery_type
    register_type: holding
    value_type: U_WORD
    skip_updates: 1

  - platform: modbus_controller
    modbus_controller_id: epever
    id: battery_capacity
    address: 0x9001
    name: ${name}_battery_capacity
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: 'Ah'
    skip_updates: 1
    icon: mdi:car-battery

  - platform: modbus_controller
    modbus_controller_id: epever
    id: temperature_compensation_coefficient
    address: 0x9002
    name: ${name}_temperature_compensation_coefficient
    unit_of_measurement: "mV/Â°C/2V"
    register_type: holding
    value_type: U_WORD
    icon: mdi:thermometer
    skip_updates: 1
    filters:
      - multiply: -0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: high_voltage_disconnect
    address: 0x9003
    name: ${name}_high_voltage_disconnect
    unit_of_measurement: "V"
    accuracy_decimals: 1
    register_type: holding
    value_type: U_WORD
    skip_updates: 1
    icon: mdi:sine-wave
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: charging_limit_voltage
    address: 0x9004
    name: ${name}_charging_limit_voltage
    unit_of_measurement: "V"
    accuracy_decimals: 1
    register_type: holding
    value_type: U_WORD
    skip_updates: 1
    icon: mdi:sine-wave
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: over_voltage_reconnect
    address: 0x9005
    name: ${name}_over_voltage_reconnect
    unit_of_measurement: "V"
    accuracy_decimals: 1
    register_type: holding
    value_type: U_WORD
    skip_updates: 1
    icon: mdi:sine-wave
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: equalization_voltage
    address: 0x9006
    name: ${name}_equalization_voltage
    unit_of_measurement: "V"
    accuracy_decimals: 1
    register_type: holding
    value_type: U_WORD
    skip_updates: 1
    icon: mdi:sine-wave
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: boost_voltage
    address: 0x9007
    name: ${name}_boost_voltage
    unit_of_measurement: "V"
    accuracy_decimals: 1
    register_type: holding
    value_type: U_WORD
    skip_updates: 1
    icon: mdi:sine-wave
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: float_voltage
    address: 0x9008
    name: ${name}_float_voltage
    unit_of_measurement: "V"
    accuracy_decimals: 1
    register_type: holding
    value_type: U_WORD
    skip_updates: 1
    icon: mdi:sine-wave
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: boost_reconnect_voltage
    address: 0x9009
    name: ${name}_boost_reconnect_voltage
    unit_of_measurement: "V"
    accuracy_decimals: 1
    register_type: holding
    value_type: U_WORD
    skip_updates: 1
    icon: mdi:sine-wave
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: low_voltage_reconnect
    address: 0x900A
    name: ${name}_low_voltage_reconnect
    unit_of_measurement: "V"
    accuracy_decimals: 1
    register_type: holding
    value_type: U_WORD
    skip_updates: 1
    icon: mdi:sine-wave
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: under_voltage_recover
    address: 0x900B
    name: ${name}_under_voltage_recover
    unit_of_measurement: "V"
    accuracy_decimals: 1
    register_type: holding
    value_type: U_WORD
    skip_updates: 1
    icon: mdi:sine-wave
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: under_voltage_warning
    address: 0x900C
    name: ${name}_under_voltage_warning
    unit_of_measurement: "V"
    accuracy_decimals: 1
    register_type: holding
    value_type: U_WORD
    skip_updates: 1
    icon: mdi:sine-wave
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: low_voltage_disconnect
    address: 0x900D
    name: ${name}_low_voltage_disconnect
    unit_of_measurement: "V"
    accuracy_decimals: 1
    register_type: holding
    value_type: U_WORD
    skip_updates: 1
    icon: mdi:sine-wave
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: discharging_limit_voltage
    address: 0x900E
    name: ${name}_discharging_limit_voltage
    unit_of_measurement: "V"
    accuracy_decimals: 1
    register_type: holding
    value_type: U_WORD
    skip_updates: 1
    icon: mdi:sine-wave
    filters:
      - multiply: 0.01

  
  - platform: modbus_controller
    modbus_controller_id: epever
    id: line_impedance
    address: 0x901D
    name: ${name}_line_impedance
    unit_of_measurement: "mOhm"
    accuracy_decimals: 1
    register_type: holding
    value_type: U_WORD
    icon: mdi:omega
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: dttv
    address: 0x901E
    name: ${name}_day_time_threshold_voltage
    unit_of_measurement: "V"
    accuracy_decimals: 1
    register_type: holding
    value_type: U_WORD
    icon: mdi:sine-wave
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: light_signal_startup_delay_time
    address: 0x901F
    name: ${name}_light_signal_startup_delay_time
    unit_of_measurement: "mins"
    register_type: holding
    value_type: U_WORD
    icon: mdi:timer-sand
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: nttv
    address: 0x9020
    name: ${name}_light_time_threshold_voltage
    unit_of_measurement: "mins"
    register_type: holding
    value_type: U_WORD
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: light_signal_close_delay_time
    address: 0x9021
    name: ${name}_light_signal_close_delay_time
    unit_of_measurement: "mins"
    register_type: holding
    value_type: U_WORD
    icon: mdi:timer-sand
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id:
      load_controlling_modes
      # 0000H Manual Control
      # 0001H Light ON/OFF
      # 0002H Light ON+ Timer/
      # 0003H Time Control
    address: 0x903D
    name: ${name}_load_controlling_modes
    register_type: holding
    accuracy_decimals: 0
    value_type: U_WORD
    skip_updates: 50

  # - platform: modbus_controller
    # modbus_controller_id: epever
    # id: working_time_length_1
    # # The length of load output timer1,
    # # D15-D8,hour, D7-D0, minute
    # address: 0x903E
    # name: ${name}_working_time_length_1
    # register_type: holding
    # accuracy_decimals: 0
    # value_type: U_WORD

  # - platform: modbus_controller
    # modbus_controller_id: epever
    # id: working_time_length_2
    # address: 0x903F
    # name: ${name}_working_time_length 2
    # register_type: holding
    # accuracy_decimals: 0
    # value_type: U_WORD

  # - platform: modbus_controller
    # modbus_controller_id: epever
    # id: turn_on_timing_1_seconds
    # address: 0x9042
    # name: ${name}_turn_on_timing_1_seconds
    # register_type: holding
    # accuracy_decimals: 0
    # value_type: U_WORD
    # skip_updates: 50

  # - platform: modbus_controller
    # modbus_controller_id: epever
    # id: turn_on_timing_1_minutes
    # address: 0x9043
    # name: ${name}_turn_on_timing_1_minutes
    # register_type: holding
    # accuracy_decimals: 0
    # value_type: U_WORD

  # - platform: modbus_controller
    # modbus_controller_id: epever
    # id: turn_on_timing_1_hours
    # address: 0x9044
    # name: ${name}_turn_on_timing_1_hours
    # register_type: holding
    # accuracy_decimals: 0
    # value_type: U_WORD

  # - platform: modbus_controller
    # modbus_controller_id: epever
    # id: turn_off_timing_1_seconds
    # address: 0x9045
    # name: ${name}_turn_off_timing_1_seconds
    # register_type: holding
    # accuracy_decimals: 0
    # value_type: U_WORD

  # - platform: modbus_controller
    # modbus_controller_id: epever
    # id: turn_off_timing_1_minutes
    # address: 0x9046
    # name: ${name}_turn off_timing_1_minutes
    # register_type: holding
    # accuracy_decimals: 0
    # value_type: U_WORD

  # - platform: modbus_controller
    # modbus_controller_id: epever
    # id: turn_off_timing_1_hours
    # address: 0x9047
    # name: ${name}_turn_off_timing_1_hours
    # register_type: holding
    # accuracy_decimals: 0
    # value_type: U_WORD

  # - platform: modbus_controller
    # modbus_controller_id: epever
    # id: turn_on_timing_2_seconds
    # address: 0x9048
    # name: ${name}_turn_on_timing_2_seconds
    # register_type: holding
    # accuracy_decimals: 0
    # value_type: U_WORD

  # - platform: modbus_controller
    # modbus_controller_id: epever
    # id: turn_on_timing_2_minutes
    # address: 0x9049
    # name: ${name}_turn_on_timing_2_minutes
    # register_type: holding
    # accuracy_decimals: 0
    # value_type: U_WORD

  # - platform: modbus_controller
    # modbus_controller_id: epever
    # id: turn_on_timing_2_hours
    # address: 0x904A
    # name: ${name}_turn_on_timing_2_hours
    # register_type: holding
    # accuracy_decimals: 0
    # value_type: U_WORD

  # - platform: modbus_controller
    # modbus_controller_id: epever
    # id: turn_off_timing_2_seconds
    # address: 0x904B
    # name: ${name}_turn_off_timing_2_seconds
    # register_type: holding
    # accuracy_decimals: 0
    # value_type: U_WORD

  # - platform: modbus_controller
    # modbus_controller_id: epever
    # id: turn_off_timing_2_minutes
    # address: 0x904C
    # name: ${name}_turn_off_timing_2_minutes
    # register_type: holding
    # accuracy_decimals: 0
    # value_type: U_WORD

  # - platform: modbus_controller
    # modbus_controller_id: epever
    # id: turn_off_timing_2_hours
    # address: 0x904D
    # name: ${name}_turn_off_timing_2_hours
    # register_type: holding
    # accuracy_decimals: 0
    # value_type: U_WORD

  # - platform: modbus_controller
    # modbus_controller_id: epever
    # id: backlight_time
    # address: 0x9063
    # name: ${name}_backlight_time
    # register_type: holding
    # accuracy_decimals: 0
    # unit_of_measurement: "s"
    # value_type: U_WORD

  - platform: modbus_controller
    modbus_controller_id: epever
    id: length_of_night_minutes
    address: 0x9065
    internal: true
    bitmask: 0xFF
    unit_of_measurement: "m"
    #name: ${name}_length_of_night
    register_type: holding
    value_type: U_WORD

  - platform: modbus_controller
    modbus_controller_id: epever
    id: length_of_night
    address: 0x9065
    bitmask: 0xFF00
    unit_of_measurement: "m"
    name: ${name}_length_of_night
    register_type: holding
    value_type: U_WORD
    skip_updates: 50
    icon: mdi:timer-sand
    filters:
      - lambda: return id(length_of_night_minutes).state  + ( 60 * x);

  - platform: modbus_controller
    modbus_controller_id: epever
    id: rated_voltage_level
    address: 0x9067
    name: ${name}_rated_voltage_level
    register_type: holding
    value_type: U_WORD
#    unit_of_measurement: 'Ah'
    skip_updates: 1
    icon: mdi:car-battery

  - platform: modbus_controller
    modbus_controller_id: epever
    id: equalization_duration
    address: 0x906B
    name: ${name}_equalization_duration
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: 'min'
    skip_updates: 1
    icon: mdi:timer-sand    
    
  - platform: modbus_controller
    modbus_controller_id: epever
    id: boost_duration
    address: 0x906C
    name: ${name}_boost_duration
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: 'min'
    skip_updates: 1
    icon: mdi:timer-sand
    
  - platform: modbus_controller
    modbus_controller_id: epever
    id: generated_energy_total
    name: ${name}_generated_energy_total
    address: 0x3312
    register_type: read
    value_type: U_DWORD_R
    accuracy_decimals: 1
    unit_of_measurement: 'kWh'
    icon: mdi:power
    filters:
      - multiply: 0.01
      
  - platform: modbus_controller
    modbus_controller_id: epever
    id: co2_reduction
    name: ${name}_CO2_reduction
    address: 0x3314
    register_type: read
    value_type: U_DWORD_R
    accuracy_decimals: 1
    unit_of_measurement: "kg"
    icon: mdi:weight-kilogram
    filters:
      - multiply: 10.0

  - platform: modbus_controller
    modbus_controller_id: epever
    id: battery_voltage
    name: ${name}_battery_voltage
    address: 0x331A
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    unit_of_measurement: "V"
    icon: mdi:sine-wave
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: battery_current
    name: ${name}_battery_current
    address: 0x331B
    register_type: read
    value_type: S_DWORD_R
    register_count: 2
    accuracy_decimals: 1
    icon: mdi:current-dc
    unit_of_measurement: "A"
    filters:
      - multiply: 0.01    

  - platform: total_daily_energy
    name: ${name}_pv_power_total_du_jour
    power_id: pv_input_power 
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    id: pv_power_total_du_jour
    method: trapezoid
    filters:
        # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    icon: mdi:counter
    
  - platform: template
    name: ${name}_pv_power_total_veille
    id: template_pv_power_total_veille
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    icon: mdi:power
    update_interval: ${updates}
    lambda: |-
      return (id(template_pv_power_total_veille).state = id(pv_power_total_veille_global));
      
  - platform: total_daily_energy
    name: ${name}_charging_power_total_du_jour
    power_id: charging_power 
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    id: charging_power_total_du_jour
    method: trapezoid
    filters:
        # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    icon: mdi:counter
    
  - platform: template
    name: ${name}_charging_power_total_veille
    id: template_charging_power_total_veille
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    icon: mdi:power
    update_interval: ${updates}
    lambda: |-
      return (id(template_charging_power_total_veille).state = id(charging_power_total_veille_global));
      
  - platform: wifi_signal
    name: WIFI_puissance_${name}
    update_interval: ${updates}    
    
switch:
  - platform: modbus_controller
    modbus_controller_id: epever
    id: manual_control_load
    register_type: coil
    address: 0x0002
    name: ${name}_manual_control_load
    bitmask: 0x1

  - platform: modbus_controller
    modbus_controller_id: epever
    id: force_load
    register_type: coil
    address: 0x0006
    name: ${name}_force_load_on/off
    bitmask: 0x1
    
  - platform: modbus_controller
    modbus_controller_id: epever
    id: low_temp_protection_charging
    register_type: holding
    address: 0x9107
    name: ${name}_low_temp_protection_charging
    bitmask: 0x100
    
  - platform: modbus_controller
    modbus_controller_id: epever
    id: low_temp_protection_discharging
    register_type: holding
    address: 0x9107
    name: ${name}_low_temp_protection_discharging
    bitmask: 0x200

  - platform: modbus_controller
    modbus_controller_id: epever
    id: over_temp_drop_power
    register_type: holding
    address: 0x9107
    name: ${name}_over_temp_drop_power
    bitmask: 0x800    
    
    
    
  - platform: restart
    name: restart_${name}
    id: restart_epever    
    
    
text_sensor:
  - platform: modbus_controller
    modbus_controller_id: epever
    name: ${name}_rtc_clock
    id: rtc_clock
    internal: true
    register_type: holding
    address: 0x9013
    register_count: 3
    raw_encode: HEXBYTES
    response_size: 6
    #                /*
    #                E20 Real time clock 9013 D7-0 Sec, D15-8 Min
    #                E21 Real time clock 9014 D7-0 Hour, D15-8 Day
    #                E22 Real time clock 9015 D7-0 Month, D15-8 Year
    #                */
    on_value:
      then:
        - lambda: |-
            ESP_LOGV("main", "decoding rtc hex encoded raw data: %s", x.c_str());
            uint8_t h=0,m=0,s=0,d=0,month_=0,y = 0 ;
            m = esphome::modbus_controller::byte_from_hex_str(x,0);
            s = esphome::modbus_controller::byte_from_hex_str(x,1);
            d = esphome::modbus_controller::byte_from_hex_str(x,2);
            h = esphome::modbus_controller::byte_from_hex_str(x,3);
            y = esphome::modbus_controller::byte_from_hex_str(x,4);
            month_ = esphome::modbus_controller::byte_from_hex_str(x,5);
            // Now check if the rtc time of the controller is ok and correct it
            time_t now = ::time(nullptr);
            struct tm *time_info = ::localtime(&now);
            int seconds = time_info->tm_sec;
            int minutes = time_info->tm_min;
            int hour = time_info->tm_hour;
            int day = time_info->tm_mday;
            int month = time_info->tm_mon + 1;
            int year = time_info->tm_year % 100;
            // correct time if needed (ignore seconds)
            if (d != day || month_ != month || y != year || h != hour || m != minutes) {
              // create the payload
              std::vector<uint16_t> rtc_data = {uint16_t((minutes << 8) | seconds), uint16_t((day << 8) | hour),
                                                uint16_t((year << 8) | month)};
              // Create a modbus command item with the time information as the payload
              esphome::modbus_controller::ModbusCommandItem set_rtc_command = esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(epever, 0x9013, 3, rtc_data);
              // Submit the command to the send queue
              epever->queue_command(set_rtc_command);
              ESP_LOGI("ModbusLambda", "tracer_6420an RTC set to %02d:%02d:%02d %02d.%02d.%04d", hour, minutes, seconds, day, month, year + 2000);
            }
            char buffer[20];
            // format time as YYYY-mm-dd hh:mm:ss
            sprintf(buffer,"%04d-%02d-%02d %02d:%02d:%02d",y+2000,month_,d,h,m,s);
            id(template_rtc).publish_state(buffer);
            
            
  # - platform: template
    # name: ${name}_battery_type_text
    # icon: mdi:car-battery
    # id: battery_type_text 
    # lambda: |-
      # if (isnan(id(battery_type).state)) { 
        # return {"KO"};
      # }
      # else {
        # static const char *battery_list[] = {"Libattery","Sealed", "Gel", "Flooded"};
        # return {battery_list[int(id(battery_type).state)]};
      # }  

  - platform: template
    name: ${name}_charger_status_text
    icon: mdi:solar-power-variant
    id: charger_status_text 
    update_interval: ${updates}
    lambda: |-
      if (isnan(id(charger_status).state)) { 
        return {"KO"};
      }
      else {
        static const char *status_list[] = {"NoNe","Discharging", "NoNe", "NoNe" , "NoNe", "Floating", "None" , "None" , "None" , "Charging"};
        return {status_list[int(id(charger_status).state)]};
      }            
        
  - platform: template
    name: ${name}_uptime_total # Temps total depuis le dÃ©marrage de la carte
    lambda: |-
      int seconds = (id(uptime_sec).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds / 60;
      seconds = seconds % 60;
      if ( days ) {
        return { (String(days) +"d " + String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s ").c_str() };
      } else if ( hours ) {
        return { (String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s ").c_str() };
      } else if ( minutes ) {
        return { (String(minutes) +"m "+ String(seconds) +"s ").c_str() };
      } else {
        return { (String(seconds) +"s ").c_str() };
      }
    icon: mdi:clock-start
    update_interval: 113s
    
  - platform: template
    name: ${name}_rtc_time_sensor
    id: template_rtc

  - platform: modbus_controller
    modbus_controller_id: epever
    name: ${name}_rtc_clock_test_2
    id: rtc_clock_test2
    internal: true
    register_type: holding
    address: 0x9013
    register_count: 3
    raw_encode: HEXBYTES
    response_size: 6    
    
script:
  - id: write_9003_900E_registers
    then:
      - lambda: |-
          esphome::modbus_controller::ModbusController *controller = id(epever);
          std::vector<uint16_t> battery_settings(12);
          battery_settings[0]  = uint16_t((id(high_voltage_disconnect_number).state)*100);
          battery_settings[1]  = uint16_t((id(charging_limit_voltage_number).state)*100);
          battery_settings[2]  = uint16_t((id(over_voltage_reconnect_number).state)*100);
          battery_settings[3]  = uint16_t((id(equalization_voltage_number).state)*100);
          battery_settings[4]  = uint16_t((id(boost_voltage_number).state)*100);
          battery_settings[5]  = uint16_t((id(float_voltage_number).state)*100);
          battery_settings[6]  = uint16_t((id(boost_reconnect_voltage_number).state)*100);
          battery_settings[7]  = uint16_t((id(low_voltage_reconnect_number).state)*100);
          battery_settings[8]  = uint16_t((id(under_voltage_recover_number).state)*100);
          battery_settings[9]  = uint16_t((id(under_voltage_warning_number).state)*100);
          battery_settings[10] = uint16_t(id(low_voltage_disconnect_number).state*100);
          battery_settings[11] = uint16_t(id(discharging_limit_voltage_number).state*100);
          esphome::modbus_controller::ModbusCommandItem battery_command = esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(controller, 0x9003, battery_settings.size() ,
                                                                                          battery_settings);
          delay(200);
          controller->queue_command(battery_command);
          delay(200);
          
