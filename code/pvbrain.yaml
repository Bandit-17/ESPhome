substitutions:
  name: pvbrain
  ats: inverseur
  bms: jkbms
  inverter: axpert

  tx_pin_bms: GPIO01
  rx_pin_bms: GPIO03
  baud_rate_bms: '115200'

  tx_pin_inverter: GPIO16   
  rx_pin_inverter: GPIO17
  baud_rate_inverter: '2400'

  tx_pin_pzem: GPIO19 
  rx_pin_pzem: GPIO18
  pzem_address_grid: '1'
  pzem_address_solar: '2'
  pzem_update: 5s
  baud_rate_pzem: '9600'
  
  i2c_sda: GPIO21  
  i2c_scl: GPIO22
  i2c_update: 5s
  template_update: 2s
  text_update: 5s

esphome:
  name: ${name}
  #platformio_options:
    # build_flags: 
      # - -DCONFIG_ARDUINO_LOOP_STACK_SIZE=32768 #16384 #8192 #16384 # #  
    # platform_packages:
      # - framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git#2.0.2
    # platform:
      # - https://github.com/platformio/platform-espressif32.git#feature/arduino-upstream       
esp32:
  board: esp32dev
  framework:
    #type: esp-idf
    type: arduino
    version: 2.0.8 #2.0.5
    platform_version: 6.1.0 #4.4.0
    
external_components:
  - source: github://syssi/esphome-jk-bms@main
    refresh: 0s
  - source: github://syssi/esphome-pipsolar@pip8048
    refresh: 0s  
  # - source: my_components
    # components: [pipsolar]
    # refresh: 0s
    
# Enable logging

logger:
   baud_rate: 0

# Enable Home Assistant API
api:

ota:
  password: "e24f57bcac31a2b3eca8da4c217185fc"

wifi:
  ssid: !secret esphome_ssid
  password: !secret esphome_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "pvbrain Fallback Hotspot"
    password: "sebydocky"
    
# mqtt:
  # broker: 192.168.1.2
  # port: 1883
  # username: mosquitto
  # password: mosquitto
  # discovery: false
  # discovery_retain: false
  #  log_topic:    

#captive_portal:

globals:
  - id: ${name}_grid_veille_global
    type: float
    restore_value: yes
    
  - id: ${name}_solar_veille_global
    type: float
    restore_value: yes
  
  - id: ${name}_${inverter}_PV_power_total_veille_global
    type: float
    restore_value: yes
    
  - id: ${name}_${inverter}_ac_output_active_power_veille_global
    type: float
    restore_value: yes

  - id: ${name}_${inverter}_battery_charging_power_veille_global
    type: float
    restore_value: yes
 
  - id: ${name}_${inverter}_battery_discharging_power_veille_global
    type: float
    restore_value: yes
    
  - id: ${name}_${bms}_battery_charging_power_veille_global
    type: float
    restore_value: yes
    
  - id: ${name}_${bms}_battery_discharging_power_veille_global
    type: float
    restore_value: yes
      
time:
  platform: sntp
  id: my_time
  
  on_time:
    - seconds: 59
      minutes: 59
      hours: 23
      then:  
        - globals.set:
                id: ${name}_grid_veille_global
                value: !lambda return ( id(${name}_grid_veille_global) =  float( id(${name}_grid_puissance_du_jour).state) );         
                
        - globals.set:
                id: ${name}_solar_veille_global
                value: !lambda return ( id(${name}_solar_veille_global) =  float( id(${name}_solar_puissance_du_jour).state) );        
         
        - globals.set:
                id: ${name}_${inverter}_PV_power_total_veille_global
                value: !lambda return ( id(${name}_${inverter}_PV_power_total_veille_global) =  float( id(${name}_${inverter}_PV_power_total_du_jour).state) );                    
  
        - globals.set:
                id: ${name}_${inverter}_ac_output_active_power_veille_global
                value: !lambda return ( id(${name}_${inverter}_ac_output_active_power_veille_global) =  float( id(${name}_${inverter}_ac_output_active_power_total_du_jour).state) );

        - globals.set:
                id: ${name}_${inverter}_battery_charging_power_veille_global
                value: !lambda return ( id(${name}_${inverter}_battery_charging_power_veille_global) =  float( id(${name}_${inverter}_battery_charging_power_total_du_jour).state) ); 
                
        - globals.set:
                id: ${name}_${inverter}_battery_discharging_power_veille_global
                value: !lambda return ( id(${name}_${inverter}_battery_discharging_power_veille_global) =  float( id(${name}_${inverter}_battery_discharging_power_total_du_jour).state) ); 

        - globals.set:
                id: ${name}_${bms}_battery_charging_power_veille_global
                value: !lambda return ( id(${name}_${bms}_battery_charging_power_veille_global) =  float( id(${name}_${bms}_battery_charging_power_total_du_jour).state) ); 
                
        - globals.set:
                id: ${name}_${bms}_battery_discharging_power_veille_global
                value: !lambda return ( id(${name}_${bms}_battery_discharging_power_veille_global) =  float( id(${name}_${bms}_battery_discharging_power_total_du_jour).state) ); 
                
                ####################### UART #######################

uart: 

 ######### UART for the JKBMS ###### 
  - id: uart_0
    tx_pin: ${tx_pin_bms}
    rx_pin: ${rx_pin_bms}
    baud_rate: ${baud_rate_bms}
    rx_buffer_size: 384

 ######### UART for PIPsolar RS232 ######
  - id: uart_1
    tx_pin: ${tx_pin_inverter}   
    rx_pin: ${rx_pin_inverter}
    baud_rate: ${baud_rate_inverter}
 
 ######### UART for the PZEMs (modbus) ###### 
  - id: uart_2
    tx_pin: ${tx_pin_pzem} 
    rx_pin: ${rx_pin_pzem}
    baud_rate: ${baud_rate_pzem}
    stop_bits: 2 

######################### DEVICES UART/MODBUS based ################### 

jk_modbus:
  - id: modbus1
    uart_id: uart_0
jk_bms:
  - id: bms1
    jk_modbus_id: modbus1

pipsolar:
  - uart_id: uart_1
    id: pip8048 
    #update_interval: 5s
   
modbus:
   id: modbus2
   uart_id: uart_2
  
########################### I2C bus  ##################

i2c:
  sda: ${i2c_sda}  
  scl: ${i2c_scl}  
  scan: True
  frequency: 50kHz
  id: bus_i2c

pcf8574:
  - id: ${name}_hub
    address: 0x20
    pcf8575: True  
    
# ads1115:
  # - address: 0x48  
    # continuous_mode: False    
    
output:
  - platform: pipsolar
    pipsolar_id: pip8048 
    battery_bulk_voltage:
      id: ${name}_${inverter}_battery_bulk_voltage_set
      possible_values: [52.0,52.1,52.2,52.3,52.4,52.5,52.6,52.7,52.8,52.9,53.0,53.1,53.2,53.3,53.4,53.5,53.6,53.7,53.8,53.9,54.0,54.1,54.2,54.3,54.4,54.5,54.6,54.7,54.8,54.9,55.0,55.1,55.2,55.3,55.4,55.5,55.6,55.7,55.8,55.9,56.0,56.1,56.2,56.3,56.4,56.5,56.6,56.7,56.8,56.9,57.0,57.1,57.2,57.3,57.4,57.5,57.6,57.7,57.8,57.9,58.0,58.1,58.2,58.3,58.4,58.5,58.6,58.7,58.8,58.9]
  
  - platform: pipsolar
    pipsolar_id: pip8048 
    battery_float_voltage:
      id: ${name}_${inverter}_battery_float_voltage_set
      possible_values: [52.0,52.1,52.2,52.3,52.4,52.5,52.6,52.7,52.8,52.9,53.0,53.1,53.2,53.3,53.4,53.5,53.6,53.7,53.8,53.9,54.0,54.1,54.2,54.3,54.4,54.5,54.6,54.7,54.8,54.9,55.0,55.1,55.2,55.3,55.4,55.5,55.6,55.7,55.8,55.9,56.0,56.1,56.2,56.3,56.4,56.5,56.6,56.7,56.8,56.9,57.0,57.1,57.2,57.3,57.4,57.5,57.6,57.7,57.8,57.9,58.0,58.1,58.2,58.3,58.4,58.5,58.6,58.7,58.8,58.9]
  
  # - platform: pipsolar
  #   pipsolar_id: pip8048 
  #   current_max_charging_current:
  #     id: ${name}_${inverter}_current_max_charging_current_set
  #     possible_values: [10,20,30,40,50,60,70,80,90,100,110,120]

  # - platform: pipsolar
  #   pipsolar_id: pip8048 
  #   current_max_ac_charging_current:
  #     id: ${name}_${inverter}_current_max_ac_charging_current_set
  #     possible_values: [2,10,20,30,40,50,60,70,80,90,100,110,120]    
      
  - platform: pipsolar
    pipsolar_id: pip8048 
    battery_under_voltage:
      id: ${name}_${inverter}_battery_under_voltage_set
      possible_values: [40.0,40.1,40.2,40.3,40.4,40.5,40.6,40.7,40.8,40.9,41.0,41.1,41.2,41.3,41.4,41.5,41.6,41.7,41.8,41.9,42.0,42.1,42.2,42.3,42.4,42.5,42.6,42.7,42.8,42.9,43.0,43.1,43.2,43.3,43.4,43.5,43.6,43.7,43.8,43.9,44.0,44.1,44.2,44.3,44.4,44.5,44.6,44.7,44.8,44.9,45.0,45.1,45.2,45.3,45.4,45.5,45.6,45.7,45.8,45.9,46.0,46.1,46.2,46.3,46.4,46.5,46.6,46.7,46.8,46.9,47.0,47.1,47.2,47.3,47.4,47.5,47.6,47.7,47.8,47.9]
  
  - platform: pipsolar
    pipsolar_id: pip8048 
    battery_recharge_voltage:
      id: ${name}_${inverter}_battery_recharge_voltage_set
      possible_values: [44.0,45.0,46.0,47.0,48.0,49.0,49.0,50.0,51.0]
    
number:

  ######### Seuils Axpert ########

  - platform: template
    name: ${name}_${inverter}_battery_bulk_voltage_number
    id: ${name}_${inverter}_battery_bulk_voltage_number
    optimistic: true
    unit_of_measurement: 'V'
    icon: mdi:sine-wave
    min_value: 52
    max_value: 58.9
    step:  0.1
    initial_value: 56.0
    restore_value: true
    mode: 'slider'
    on_value:
      then:
        - output.pipsolar.set_level:
            id: ${name}_${inverter}_battery_bulk_voltage_set
            value: !lambda return (float(id(${name}_${inverter}_battery_bulk_voltage_number).state));

  - platform: template
    name: ${name}_${inverter}_battery_float_voltage_number
    id: ${name}_${inverter}_battery_float_voltage_number
    optimistic: true
    unit_of_measurement: 'V'
    icon: mdi:sine-wave
    min_value: 52
    max_value: 58.9
    step:  0.1
    initial_value: 54
    restore_value: true
    mode: 'slider'
    on_value:
      then:
        - output.pipsolar.set_level:
            id: ${name}_${inverter}_battery_float_voltage_set
            value: !lambda return (float(id(${name}_${inverter}_battery_float_voltage_number).state));

  # - platform: template
  #   name: ${name}_${inverter}_current_max_charging_current_number
  #   id: ${name}_${inverter}_current_max_charging_current_number
  #   optimistic: true
  #   unit_of_measurement: 'A'
  #   icon: mdi:current-dc
  #   min_value: 10
  #   max_value: 120
  #   step:  10
  #   initial_value: 10
  #   restore_value: true
  #   mode: 'slider'
  #   on_value:
  #     then:
  #       - output.pipsolar.set_level:
  #           id: ${name}_${inverter}_current_max_charging_current_set
  #           value: !lambda return (id(${name}_${inverter}_current_max_charging_current_number).state);
            
  # - platform: template
  #   name: ${name}_${inverter}_current_max_ac_charging_current_number
  #   id: ${name}_${inverter}_current_max_ac_charging_current_number
  #   optimistic: true
  #   unit_of_measurement: 'A'
  #   icon: mdi:current-dc
  #   min_value: 2
  #   max_value: 120
  #   step:  1
  #   initial_value: 2
  #   restore_value: true
  #   mode: 'slider'
  #   on_value:
  #     then:
  #       - output.pipsolar.set_level:
  #           id: ${name}_${inverter}_current_max_ac_charging_current_set
  #           value: !lambda return (id(${name}_${inverter}_current_max_ac_charging_current_number).state);                    
            
  - platform: template
    name: ${name}_${inverter}_battery_under_voltage_number
    id: ${name}_${inverter}_battery_under_voltage_number
    optimistic: true
    unit_of_measurement: 'V'
    icon: mdi:sine-wave
    min_value: 40.0
    max_value: 48.0
    step:  0.1
    initial_value: 44.0
    restore_value: true
    mode: 'slider'
    on_value:
      then:
        - output.pipsolar.set_level:
            id: ${name}_${inverter}_battery_under_voltage_set
            value: !lambda return (id(${name}_${inverter}_battery_under_voltage_number).state);

  - platform: template
    name: ${name}_${inverter}_battery_recharge_voltage_number
    id: ${name}_${inverter}_battery_recharge_voltage_number
    optimistic: true
    unit_of_measurement: 'V'
    icon: mdi:sine-wave
    min_value: 44.0
    max_value: 51.0
    step:  1.0
    initial_value: 48.0
    restore_value: true
    mode: 'slider'
    on_value:
      then:
        - output.pipsolar.set_level:
            id: ${name}_${inverter}_battery_recharge_voltage_set
            value: !lambda return (id(${name}_${inverter}_battery_recharge_voltage_number).state);
                 
  ######### Seuils Automatic Switch Transfert ########            
            
  - platform: template
    name: ${name}_${ats}_tension_bascule_solar_to_grid_number
    id: ${name}_${ats}_tension_bascule_solar_to_grid_number
    optimistic: true
    unit_of_measurement: 'V'
    icon: mdi:sine-wave
    min_value: 45
    max_value: 52
    step:  0.1
    initial_value: 49.5
    restore_value: true
    mode: 'slider'

  - platform: template
    name: ${name}_${ats}_tension_bascule_grid_to_solar_number
    id: ${name}_${ats}_tension_bascule_grid_to_solar_number
    optimistic: true
    unit_of_measurement: 'V'
    icon: mdi:sine-wave
    min_value: 48
    max_value: 56
    step:  0.1
    initial_value: 51
    restore_value: true
    mode: 'slider'    

binary_sensor:
         
  - platform: status
    name: ${name}_status

  - platform: gpio
    pin: GPIO15
    name: ${name}_emergency_stop
    id: ${name}_emergency_stop
    filters:
      - invert:
      - delayed_off: 100ms
    on_press:
      then:
        - select.set:
           id: ${name}_${inverter}_current_max_charging_current_select 
           option: "10A"
        - delay: 3s
        - switch.turn_off: ${name}_ats_automatic_control
        - script.execute: script_from_solar_to_grid
    
  - platform: gpio
    pin: GPIO13
    name: ${name}_grid_230V
    id: ${name}_grid_230V
    filters:
      - invert:
      - delayed_off: 100ms   
    
  - platform: gpio
    pin: GPIO14
    name: ${name}_solar_230V
    id: ${name}_solar_230V
    filters:
      - invert:
      - delayed_off: 100ms
         
  - platform: pipsolar
    pipsolar_id: pip8048
    # add_sbu_priority_version:
      # name: "pvbrain_axpert_add_sbu_priority_version"
    configuration_status:
      name: ${name}_${inverter}_configuration_status
#    scc_firmware_version:
#      name: "${name} scc_firmware_version"
    load_status:
      name: ${name}_${inverter}_load_status
    # battery_voltage_to_steady_while_charging:
      # name: "pvbrain_axpert_battery_voltage_to_steady_while_charging"
    charging_status:
      name: ${name}_${inverter}_charging_status
    scc_charging_status:
      name: ${name}_${inverter}_scc_charging_status
    ac_charging_status:
      name: ${name}_${inverter}_ac_charging_status
    # charging_to_floating_mode:
      # name: "pvbrain_axpert_charging_to_floating_mode"
    switch_on:
      name: ${name}_${inverter}_switch_on
      id: ${name}_${inverter}_switch_on               
    power_saving:
      name: ${name}_${inverter}_power_saving
       
  - platform: jk_bms
    charging:
      name: ${name}_${bms}_charging
    discharging:
      name: ${name}_${bms}_discharging
    balancing:
      name: ${name}_${bms}_balancing
#    dedicated_charger:
#      name: "pvbrain_jkbms dedicated charger"
      
      
  - platform: template
    name: ${name}_${inverter}_grid_input_on
    id: ${name}_${inverter}_grid_input_on
    lambda: |-
      if (id(${name}_${inverter}_grid_voltage).state > 0) {
        // Grid is connected
        return true;
      } else {
        // Grid is disconnected.
        return false;
      }
      
button:
  - platform: template
    name: ${name}_grid_reset_energy
    on_press:
      then:
        - pzemac.reset_energy: ${name}_pzem_grid
        
  - platform: template
    name: ${name}_solar_reset_energy
    on_press:
      then:
        - pzemac.reset_energy: ${name}_pzem_solar
        
  - platform: template
    name: ${name}_from_solar_to_grid
    id: ${name}_from_solar_to_grid
    icon: mdi:transmission-tower-import
    on_press:    
       then:
        - switch.turn_off: ${name}_ats_automatic_control
        - script.execute: script_from_solar_to_grid
 
  - platform: template
    name: ${name}_from_grid_to_solar
    id: ${name}_from_grid_to_solar
    icon: mdi:solar-panel
    on_press:
       then:
         - switch.turn_off: ${name}_ats_automatic_control
         - script.execute: script_from_grid_to_solar
 
switch:

  - platform: restart
    name: restart_${name}
    
  - platform: template
    name: ${name}_ats_automatic_control
    id: ${name}_ats_automatic_control
    optimistic: true    
    
  - platform: gpio
    id: ${name}_relay_${inverter}
    name: ${name}_relay_${inverter}
    pin:
      pcf8574: ${name}_hub
      # Use pin number 1
      number: 4
      # One of INPUT or OUTPUT
      mode: OUTPUT
      inverted: true    
      
  - platform: gpio
    id: ${name}_relay_12vto48V
    name: ${name}_relay_12vto48V
    pin:
      pcf8574: ${name}_hub
      # Use pin number 0
      number: 5
      # One of INPUT or OUTPUT
      mode: OUTPUT
      inverted: True    

  - platform: gpio
    id: ${name}_relay_${ats}_solar_input
    name: ${name}_relay_${ats}_solar_input
    pin:
      pcf8574: ${name}_hub
      # Use pin number 0
      number: 6
      # One of INPUT or OUTPUT
      mode: OUTPUT
      inverted: True
             
  - platform: gpio
    id: ${name}_relay_${ats}_grid_input
    name: ${name}_relay_${ats}_grid_input
    pin:
      pcf8574: ${name}_hub
      # Use pin number 0
      number: 7
      # One of INPUT or OUTPUT
      mode: OUTPUT
      inverted: True 
      
  - platform: pipsolar
    pipsolar_id: pip8048
    output_source_priority_utility:
      name: ${name}_${inverter}_output_source_priority_utility
    output_source_priority_solar:
      name: ${name}_${inverter}_output_source_priority_solar
    output_source_priority_battery:
      name: ${name}_${inverter}_output_source_priority_battery
    input_voltage_range:
      name: ${name}_${inverter}_input_voltage_range
    # pv_ok_condition_for_parallel:
      # name: ${name}_${inverter}_pv_ok_condition_for_parallel
    # pv_power_balance:
      # name: ${name}_${inverter}_pv_power_balance
      
sensor:    
  - platform: wifi_signal
    name: WiFi puissance_${name}
    update_interval: 10s
    
  - platform: uptime
    id: uptime_sec
           
    ############# PZEM1 GRID ENEDIS ##################
    
  - platform: pzemac
    address: ${pzem_address_grid}
    current:
      name: ${name}_grid_courant
      accuracy_decimals: 2
    voltage:
      name: ${name}_grid_tension
      accuracy_decimals: 2
    power:
      name: ${name}_grid_puissance
      unit_of_measurement: W
      accuracy_decimals: 1
      id: ${name}_grid_puissance
    frequency:
      name: ${name}_grid_frequence
      unit_of_measurement: Hz
      accuracy_decimals: 2
    power_factor:
      name: ${name}_grid_facteur_puissance
      accuracy_decimals: 2
      id: ${name}_grid_facteur_puissance
    energy:
      name: ${name}_grid_energy
      unit_of_measurement: Wh
      accuracy_decimals: 1
      id: ${name}_grid_energy
    update_interval: ${pzem_update}
    modbus_id: modbus2
    id: ${name}_pzem_grid
    
  - platform: template
    name: ${name}_grid_puissance_cumulee
    unit_of_measurement: "kWh"
    accuracy_decimals: 1
    update_interval: ${template_update}
    icon: mdi:power
    lambda: return (( (id(${name}_grid_energy).state)/1000.0));
    
  - platform: total_daily_energy
    name: ${name}_grid_du_jour
    power_id: ${name}_grid_puissance 
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    id: ${name}_grid_puissance_du_jour
    method: trapezoid
    filters:
        # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    icon: mdi:counter
    
  - platform: template
    name: ${name}_grid_veille
    id: template_${name}_grid_veille
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    icon: mdi:power
    update_interval: ${template_update}
    lambda: |-
      return (id(template_${name}_grid_veille).state = id(${name}_grid_veille_global));
    
  - platform: template
    name: ${name}_grid_puissance_apparente
    id: ${name}_grid_puissance_apparente
    unit_of_measurement: "VA"
    accuracy_decimals: 1
    update_interval: ${template_update}
    icon: mdi:power
    lambda: |-
      if (float(id(${name}_grid_facteur_puissance).state) != 0.0){
        return ( (id(${name}_grid_puissance).state/id(${name}_grid_facteur_puissance).state));
      }
      else{
        return id(${name}_grid_puissance).state;
      }
    
  - platform: template
    name: ${name}_grid_puissance_reactive
    id: ${name}_grid_puissance_reactive
    unit_of_measurement: "VAr"
    accuracy_decimals: 1
    update_interval: ${template_update}
    icon: mdi:power
    lambda: return (  id(${name}_grid_puissance_apparente).state*sin(acos( id(${name}_grid_facteur_puissance).state ))  );
    
  ########### PZEM2 SOLAR PV ##################  
    
  - platform: pzemac
    address: ${pzem_address_solar}
    current:
      name: ${name}_solar_courant
      accuracy_decimals: 2
    voltage:
      name: ${name}_solar_tension
      accuracy_decimals: 2
    power:
      name: ${name}_solar_puissance
      unit_of_measurement: W
      accuracy_decimals: 1
      id: ${name}_solar_puissance
    frequency:
      name: ${name}_solar_frequence
      unit_of_measurement: Hz
      accuracy_decimals: 2
    power_factor:
      name: ${name}_solar_facteur_puissance
      accuracy_decimals: 2
      id: ${name}_solar_facteur_puissance
    energy:
      name: ${name}_solar_energy
      unit_of_measurement: Wh
      accuracy_decimals: 1
      id: ${name}_solar_energy
    update_interval: ${pzem_update}
    modbus_id: modbus2
    id: ${name}_pzem_solar
    
  - platform: template
    name: ${name}_solar_puissance_cumulee
    unit_of_measurement: "kWh"
    accuracy_decimals: 1
    update_interval: ${template_update}
    icon: mdi:power
    lambda: return (( (id(${name}_solar_energy).state)/1000.0));
    
  - platform: total_daily_energy
    name: ${name}_solar_du_jour
    power_id: ${name}_solar_puissance 
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    id: ${name}_solar_puissance_du_jour
    method: trapezoid
    filters:
       # Multiplication factor from W to kW is 0.001
       - multiply: 0.001
    icon: mdi:counter
    
  - platform: template
    name: ${name}_solar_veille
    id: template_${name}_solar_veille
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    icon: mdi:power
    update_interval: ${template_update}
    lambda: |-
      return (id(template_${name}_solar_veille).state = id(${name}_solar_veille_global));
    
  - platform: template
    name: ${name}_solar_puissance_apparente
    id: ${name}_solar_puissance_apparente
    unit_of_measurement: "VA"
    accuracy_decimals: 1
    update_interval: ${template_update}
    icon: mdi:power
    lambda: |-
      if (float(id(${name}_solar_facteur_puissance).state) != 0.0){
        return ( (id(${name}_solar_puissance).state/id(${name}_solar_facteur_puissance).state));
      }
      else{
        return id(${name}_solar_puissance).state;
      }
  - platform: template
    name: ${name}_solar_puissance_reactive
    id: ${name}_solar_puissance_reactive
    unit_of_measurement: "VAr"
    accuracy_decimals: 1
    update_interval: ${template_update}
    icon: mdi:power
    lambda: return (  id(${name}_solar_puissance_apparente).state*sin(acos( id(${name}_solar_facteur_puissance).state ))  );  
    
  ############# BME 280  ##################  
    
  - platform: bme280 #bme280
    temperature:
      name: ${name}_temperature_sdb_bas
      accuracy_decimals: 1
      oversampling: 16x
      id: ${name}_temperature_sdb_bas
    pressure:
      name: ${name}_pression_sdb_bas
      accuracy_decimals: 1
      id: ${name}_pression_sdb_bas
    humidity:
      name: ${name}_humidite_sdb_bas
      accuracy_decimals: 1
      id: ${name}_humidite_sdb_bas
    address: 0x76
    update_interval: ${i2c_update}
    
   # ######### ADS1115 ########### 
    
  # - platform: ads1115
    # multiplexer: 'A0_A1'
    # gain: 4.096 #6.144
    # name: ${name}_PV1_voltage
    # id: ${name}_PV1_voltage
    # update_interval: ${i2c_update}
    # filters:
    # - lambda: return x*(500/4.096);
    
  # - platform: ads1115
    # multiplexer: 'A2_A3'
    # gain: 4.096 #6.144
    # name: ${name}_PV2_voltage
    # id: ${name}_PV2_voltage
    # update_interval: ${i2c_update}
    # filters:
    # - lambda: return x*(500/4.096);  
    
    
  - platform: pipsolar
    pipsolar_id: pip8048
    # grid_rating_voltage:
      # id: ${name}_${inverter}_grid_rating_voltage
      # name: ${name}_${inverter}_grid_rating_voltage
    # grid_rating_current:
      # id: ${name}_${inverter}_grid_rating_current
      # name: ${name}_${inverter}_grid_rating_current
    ac_output_rating_voltage:
      id: ${name}_${inverter}_ac_output_rating_voltage
      name: ${name}_${inverter}_ac_output_rating_voltage
    ac_output_rating_frequency:
      id: ${name}_${inverter}_ac_output_rating_frequency
      name: ${name}_${inverter}_ac_output_rating_frequency
    ac_output_rating_current:
      id: ${name}_${inverter}_ac_output_rating_current
      name: ${name}_${inverter}_ac_output_rating_current  
    ac_output_rating_apparent_power:
      id: ${name}_${inverter}_ac_output_rating_apparent_power
      name: ${name}_${inverter}_ac_output_rating_apparent_power
    ac_output_rating_active_power:
      id: ${name}_${inverter}_ac_output_rating_active_power
      name: ${name}_${inverter}_ac_output_rating_active_power
    battery_rating_voltage:
      id: ${name}_${inverter}_battery_rating_voltage
      name: ${name}_${inverter}_battery_rating_voltage
    battery_recharge_voltage:
      id: ${name}_${inverter}_battery_recharge_voltage
      name: ${name}_${inverter}_battery_recharge_voltage
    battery_under_voltage:
      id: ${name}_${inverter}_battery_under_voltage
      name: ${name}_${inverter}_battery_under_voltage
    battery_bulk_voltage:
      id: ${name}_${inverter}_battery_bulk_voltage
      name: ${name}_${inverter}_battery_bulk_voltage
    battery_float_voltage:
      id: ${name}_${inverter}_battery_float_voltage
      name: ${name}_${inverter}_battery_float_voltage
    battery_type:
      id: ${name}_${inverter}_battery_type
      name: ${name}_${inverter}_battery_type
    battery_redischarge_voltage:
      id: ${name}_${inverter}_battery_redischarge_voltage
      name: ${name}_${inverter}_battery_redischarge_voltage
    current_max_ac_charging_current:
      id: ${name}_${inverter}_current_max_ac_charging_current
      name: ${name}_${inverter}_current_max_ac_charging_current
    current_max_charging_current:
      id: ${name}_${inverter}_current_max_charging_current
      name: ${name}_${inverter}_current_max_charging_current
    output_source_priority:
      id: ${name}_${inverter}_output_source_priority
      name: ${name}_${inverter}_output_source_priority
    output_mode:
      id: ${name}_${inverter}_output_mode
      name: ${name}_${inverter}_output_mode
    output_load_percent:
      id: ${name}_${inverter}_output_load_percent
      name: ${name}_${inverter}_output_load_percent
    charger_source_priority:
      id: ${name}_${inverter}_charger_source_priority
      name: ${name}_${inverter}_charger_source_priority
    grid_voltage:
      id: ${name}_${inverter}_grid_voltage
      name: ${name}_${inverter}_grid_voltage
    grid_frequency:
      id: ${name}_${inverter}_grid_frequency
      name: ${name}_${inverter}_grid_frequency  
    ac_output_voltage:
      id: ${name}_${inverter}_ac_output_voltage
      name: ${name}_${inverter}_ac_output_voltage
    ac_output_frequency:
      id: ${name}_${inverter}_ac_output_frequency
      name: ${name}_${inverter}_ac_output_frequency
    # ac_output_apparent_power:
      # id: ${name}_${inverter}_ac_output_apparent_power
      # name: ${name}_${inverter}_ac_output_apparent_power
    ac_output_active_power:
      id: ${name}_${inverter}_ac_output_active_power
      name: ${name}_${inverter}_ac_output_active_power
    bus_voltage:
      id: ${name}_${inverter}_bus_voltage
      name: ${name}_${inverter}_bus_voltage
    battery_voltage:
      id: ${name}_${inverter}_battery_voltage
      name: ${name}_${inverter}_battery_voltage      
    battery_charging_current:
      id: ${name}_${inverter}_battery_charging_current
      name: ${name}_${inverter}_battery_charging_current
    battery_capacity_percent:
      id: ${name}_${inverter}_battery_capacity_percent
      name: ${name}_${inverter}_battery_capacity_percent
    battery_voltage_scc:
      id: ${name}_${inverter}_battery_voltage_scc
      name: ${name}_${inverter}_battery_voltage_scc
    battery_discharge_current:
      id: ${name}_${inverter}_battery_discharge_current
      name: ${name}_${inverter}_battery_discharge_current
    battery_voltage_offset_for_fans_on:
      id: ${name}_${inverter}_battery_voltage_offset_for_fans_on
      name: ${name}_${inverter}_battery_voltage_offset_for_fans_on
    inverter_heat_sink_temperature:
      id: ${name}_${inverter}_inverter_heat_sink_temperature
      name: ${name}_${inverter}_inverter_heat_sink_temperature
#    add_sbu_priority_version:
#      id: ${name}_${inverter}_add_sbu_priority_version
#      name: ${name}_${inverter}_add_sbu_priority_version
#    eeprom_version:
#      id: ${name}_${inverter}_eeprom_version
#      name: ${name}_${inverter}_eeprom_version
#    scc_firmware_version:
#      id: ${name}_${inverter}_scc_firmware_version
#      name: ${name}_${inverter}_scc_firmware_version
    pv1_input_current:
      id: ${name}_${inverter}_pv1_input_current
      name: ${name}_${inverter}_pv1_input_current    
    pv1_input_voltage:
      id: ${name}_${inverter}_pv1_input_voltage
      name: ${name}_${inverter}_pv1_input_voltage
    pv1_charging_power:
      id: ${name}_${inverter}_pv1_charging_power
      name: ${name}_${inverter}_pv1_charging_power
    pv2_input_current:
      id: ${name}_${inverter}_pv2_input_current
      name: ${name}_${inverter}_pv2_input_current  
    pv2_input_voltage:
      id: ${name}_${inverter}_pv2_input_voltage
      name: ${name}_${inverter}_pv2_input_voltage  
    pv2_charging_power:
      id: ${name}_${inverter}_pv2_charging_power
      name: ${name}_${inverter}_pv2_charging_power

      
  - platform: total_daily_energy
    name: ${name}_${inverter}_PV1_power_total_du_jour
    power_id: ${name}_${inverter}_pv1_charging_power 
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    id: ${name}_${inverter}_PV1_power_total_du_jour
    method: trapezoid
    filters:
       # Multiplication factor from W to kW is 0.001
       - multiply: 0.001
    icon: mdi:counter
    
  - platform: total_daily_energy
    name: ${name}_${inverter}_PV2_power_total_du_jour
    power_id: ${name}_${inverter}_pv2_charging_power 
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    id: ${name}_${inverter}_PV2_power_total_du_jour
    method: trapezoid
    filters:
       # Multiplication factor from W to kW is 0.001
       - multiply: 0.001
    icon: mdi:counter  
      
  - platform: template
    name: ${name}_${inverter}_PV_power_total
    id: ${name}_${inverter}_PV_power_total
    unit_of_measurement: "W"
    accuracy_decimals: 1
    update_interval: ${template_update}
    icon: mdi:power  
    lambda: return ( (id(${name}_${inverter}_pv1_charging_power).state) + (id(${name}_${inverter}_pv2_charging_power).state) );     
    
  - platform: total_daily_energy
    name: ${name}_${inverter}_PV_power_total_du_jour
    power_id: ${name}_${inverter}_PV_power_total 
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    id: ${name}_${inverter}_PV_power_total_du_jour
    method: trapezoid
    filters:
       # Multiplication factor from W to kW is 0.001
       - multiply: 0.001
    icon: mdi:counter
    
  - platform: template
    name: ${name}_${inverter}_PV_power_total_veille
    id: template_${name}_${inverter}_PV_power_total_veille
    unit_of_measurement: "kwh"
    accuracy_decimals: 2
    icon: mdi:power
    update_interval: ${template_update}
    lambda: |-
      return ( id(template_${name}_${inverter}_PV_power_total_veille).state = id(${name}_${inverter}_PV_power_total_veille_global) );

  - platform: total_daily_energy
    name: ${name}_${inverter}_ac_output_active_power_total_du_jour
    power_id: ${name}_${inverter}_ac_output_active_power 
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    id: ${name}_${inverter}_ac_output_active_power_total_du_jour
    method: trapezoid
    filters:
       # Multiplication factor from W to kW is 0.001
       - multiply: 0.001
    icon: mdi:counter
    
  - platform: template
    name: ${name}_${inverter}_ac_output_active_power_veille
    id: template_${name}_${inverter}_ac_output_active_power_veille
    unit_of_measurement: "kwh"
    accuracy_decimals: 2
    icon: mdi:power
    update_interval: ${template_update}
    lambda: |-
      return ( id(template_${name}_${inverter}_ac_output_active_power_veille).state = id(${name}_${inverter}_ac_output_active_power_veille_global) );
    
  - platform: template
    name: ${name}_${inverter}_battery_charging_power
    id: ${name}_${inverter}_battery_charging_power
    unit_of_measurement: "W"
    accuracy_decimals: 1
    update_interval: ${template_update}
    icon: mdi:power  
    lambda: return ( (id(${name}_${inverter}_battery_voltage).state) * (id(${name}_${inverter}_battery_charging_current).state) );   

  - platform: total_daily_energy
    name: ${name}_${inverter}_battery_charging_power_total_du_jour
    power_id: ${name}_${inverter}_battery_charging_power 
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    id: ${name}_${inverter}_battery_charging_power_total_du_jour
    method: trapezoid
    filters:
       # Multiplication factor from W to kW is 0.001
       - multiply: 0.001
    icon: mdi:counter
    
  - platform: template
    name: ${name}_${inverter}_battery_charging_power_veille
    id: template_${name}_${inverter}_battery_charging_power_veille
    unit_of_measurement: "kwh"
    accuracy_decimals: 2
    icon: mdi:power
    update_interval: ${template_update}
    lambda: |-
      return ( id(template_${name}_${inverter}_battery_charging_power_veille).state = id(${name}_${inverter}_battery_charging_power_veille_global) );    
       
  - platform: template
    name: ${name}_${inverter}_battery_discharging_power
    id: ${name}_${inverter}_battery_discharging_power
    unit_of_measurement: "W"
    accuracy_decimals: 1
    update_interval: ${template_update}
    icon: mdi:power  
    lambda: return ( (id(${name}_${inverter}_battery_voltage).state) * (id(${name}_${inverter}_battery_discharge_current).state) );       

  - platform: total_daily_energy
    name: ${name}_${inverter}_battery_discharging_power_total_du_jour
    power_id: ${name}_${inverter}_battery_discharging_power 
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    id: ${name}_${inverter}_battery_discharging_power_total_du_jour
    method: trapezoid
    filters:
       # Multiplication factor from W to kW is 0.001
       - multiply: 0.001
    icon: mdi:counter
    
  - platform: template
    name: ${name}_${inverter}_battery_discharging_power_veille
    id: template_${name}_${inverter}_battery_discharging_power_veille
    unit_of_measurement: "kwh"
    accuracy_decimals: 2
    icon: mdi:power
    update_interval: ${template_update}
    lambda: |-
      return ( id(template_${name}_${inverter}_battery_discharging_power_veille).state = id(${name}_${inverter}_battery_discharging_power_veille_global) );        
   
  ############# JKBMS ##################  
       
  - platform: jk_bms
    jk_bms_id: bms1
    min_cell_voltage:
      name: ${name}_${bms}_min_cell_voltage
    max_cell_voltage:
      name: ${name}_${bms}_max_cell_voltage
    min_voltage_cell:
      name: ${name}_${bms}_min_voltage_cell
    max_voltage_cell:
      name: ${name}_${bms}_max_voltage_cell  
    delta_cell_voltage:
      name: ${name}_${bms}_delta_cell_voltage
    average_cell_voltage:
      name: ${name}_${bms}_average_cell_voltage 
    cell_voltage_1:
      name: ${name}_${bms}_cell_voltage_1
    cell_voltage_2:
      name: ${name}_${bms}_cell_voltage_2
    cell_voltage_3:
      name: ${name}_${bms}_cell_voltage_3
    cell_voltage_4:
      name: ${name}_${bms}_cell_voltage_4
    cell_voltage_5:
      name: ${name}_${bms}_cell_voltage_5
    cell_voltage_6:
      name: ${name}_${bms}_cell_voltage_6
    cell_voltage_7:
      name: ${name}_${bms}_cell_voltage_7
    cell_voltage_8:
      name: ${name}_${bms}_cell_voltage_8
    cell_voltage_9:
      name: ${name}_${bms}_cell_voltage_9
    cell_voltage_10:
      name: ${name}_${bms}_cell_voltage_10
    cell_voltage_11:
      name: ${name}_${bms}_cell_voltage_11
    cell_voltage_12:
      name: ${name}_${bms}_cell_voltage_12
    cell_voltage_13:
      name: ${name}_${bms}_cell_voltage_13
    cell_voltage_14:
      name: ${name}_${bms}_cell_voltage_14
    cell_voltage_15:
      name: ${name}_${bms}_cell_voltage_15
    cell_voltage_16:
      name: ${name}_${bms}_cell_voltage_16
    # current_calibration:
    #   name: ${name}_${bms}_current_calibration
    power_tube_temperature:
      name: ${name}_${bms}_power_tube_temperature
    temperature_sensor_1:
      name: ${name}_${bms}_temperature_sensor_1
    temperature_sensor_2:
      name: ${name}_${bms}_temperature_sensor_2  
    total_voltage:
      name: ${name}_${bms}_total_voltage
      id: ${name}_${bms}_total_voltage
      on_value:
       - if:  ##### si tension batterie < seuil bas    ######
          condition:
            and:
              - switch.is_on: ${name}_ats_automatic_control
              - lambda: |-
                 return ( ( float(id(${name}_${bms}_total_voltage).state) < float(id(${name}_${ats}_tension_bascule_solar_to_grid_number).state) )     );            
          then:
            - script.execute: script_from_solar_to_grid
 
       - if:  ##### si tension batterie > seuil haut    ######
          condition:
            and: 
              - switch.is_on: ${name}_ats_automatic_control
              - lambda: |-
                  return ( ( float(id(${name}_${bms}_total_voltage).state) > float(id(${name}_${ats}_tension_bascule_solar_to_grid_number).state) )     );            
          then:
            - script.execute: script_from_grid_to_solar
        
    current:
      name: ${name}_${bms}_current
      id: ${name}_${bms}_current
#      filters:
#        - multiply: -1
    capacity_remaining:
      name: ${name}_${bms}_capacity_remaining
      id: ${name}_${bms}_capacity_remaining
    charging_cycles:
      name: ${name}_${bms}_charging_cycles
#    total_charging_cycle_capacity:
#      name: ${name}_${bms}_total_charging_cycle_capacity
    cell_voltage_overvoltage_protection:
      name: ${name}_${bms}_voltage_overvoltage_protection
    cell_voltage_overvoltage_recovery:
      name: ${name}_${bms}_voltage_overvoltage_recovery
    # cell_voltage_overvoltage_delay:
      # name: ${name}_${bms}_voltage_overvoltage_delay
    cell_voltage_undervoltage_protection:
      name: ${name}_${bms}_voltage_undervoltage_protection
    cell_voltage_undervoltage_recovery:
      name: ${name}_${bms}_voltage_undervoltage_recovery"
    # cell_voltage_undervoltage_delay:
      # name: ${name}_${bms}_voltage_undervoltage_delay
    total_battery_capacity_setting:
      name: ${name}_${bms}_total_battery_capacity_setting
      id: ${name}_${bms}_total_battery_capacity_setting
    errors_bitmask:
      name: ${name}_${bms}_errors_bitmask
    # operation_mode_bitmask:
      # name: ${name}_${bms}_operation_mode_bitmask
    # battery_strings:
      # name: ${name}_${bms}_battery_strings
  
  - platform: template
    name: ${name}_${bms}_battery_charging_current
    id: ${name}_${bms}_battery_charging_current
    unit_of_measurement: "A"
    accuracy_decimals: 1
    update_interval: ${template_update}
    icon: mdi:current-dc 
    lambda: |-
      if (float(id(${name}_${bms}_current).state)> 0){
        return ( (id(${name}_${bms}_current).state) );   
      }
      else {
        return 0.0;
      }  
  
  - platform: template
    name: ${name}_${bms}_battery_charging_power
    id: ${name}_${bms}_battery_charging_power
    unit_of_measurement: "W"
    accuracy_decimals: 1
    update_interval: ${template_update}
    icon: mdi:power  
    lambda: |-
      if (float(id(${name}_${bms}_current).state)> 0){
        return ( (id(${name}_${bms}_total_voltage).state) * (id(${name}_${bms}_current).state) );   
      }
      else {
        return 0.0;
      }
  - platform: total_daily_energy
    name: ${name}_${bms}_battery_charging_power_total_du_jour
    power_id: ${name}_${bms}_battery_charging_power 
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    id: ${name}_${bms}_battery_charging_power_total_du_jour
    method: trapezoid
    filters:
       # Multiplication factor from W to kW is 0.001
       - multiply: 0.001
    icon: mdi:counter
    
  - platform: template
    name: ${name}_${bms}_battery_charging_power_veille
    id: template_${name}_${bms}_battery_charging_power_veille
    unit_of_measurement: "kwh"
    accuracy_decimals: 2
    icon: mdi:power
    update_interval: ${template_update}
    lambda: |-
      return ( id(template_${name}_${bms}_battery_charging_power_veille).state = id(${name}_${bms}_battery_charging_power_veille_global) );    

  - platform: template
    name: ${name}_${bms}_battery_discharging_current
    id: ${name}_${bms}_battery_discharging_current
    unit_of_measurement: "A"
    accuracy_decimals: 1
    update_interval: ${template_update}
    icon: mdi:current-dc 
    lambda: |-
      if (float(id(${name}_${bms}_current).state)< 0){
        return ( (id(${name}_${bms}_current).state) );   
      }
      else {
        return 0.0;
      }    
    
  - platform: template
    name: ${name}_${bms}_battery_discharging_power
    id: ${name}_${bms}_battery_discharging_power
    unit_of_measurement: "W"
    accuracy_decimals: 1
    update_interval: ${template_update}
    icon: mdi:power  
    lambda: |-
      if (float(id(${name}_${bms}_current).state) < 0){
        return ( -(id(${name}_${bms}_total_voltage).state) * (id(${name}_${bms}_current).state) );   
      }
      else {
        return 0.0;
      }
      
  - platform: total_daily_energy
    name: ${name}_${bms}_battery_discharging_power_total_du_jour
    power_id: ${name}_${bms}_battery_discharging_power 
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    id: ${name}_${bms}_battery_discharging_power_total_du_jour
    method: trapezoid
    filters:
       # Multiplication factor from W to kW is 0.001
       - multiply: 0.001
    icon: mdi:counter
    
  - platform: template
    name: ${name}_${bms}_battery_discharging_power_veille
    id: template_${name}_${bms}_battery_discharging_power_veille
    unit_of_measurement: "kwh"
    accuracy_decimals: 2
    icon: mdi:power
    update_interval: ${template_update}
    lambda: |-
      return ( id(template_${name}_${bms}_battery_discharging_power_veille).state = id(${name}_${bms}_battery_discharging_power_veille_global) );

  - platform: template
    name: ${name}_${bms}_c_values
    id: ${name}_${bms}_c_values
    unit_of_measurement: "c"
    accuracy_decimals: 3
    update_interval: ${template_update}
    icon: mdi:current-dc
    lambda: |-
        return ( fabs(float(id(${name}_${bms}_current).state)) / float(id(${name}_${bms}_total_battery_capacity_setting).state) );   

#      if (id(pvbrain_jkbms_total_battery_capacity_setting).has_state()) {
#      }
text_sensor:
  - platform: template
    name: ${name}_uptime
    lambda: |-
      int seconds = (id(uptime_sec).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600); 
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
      if ( days ) {
        return { (std::to_string(days) +"d " + std::to_string(hours) +"h " + std::to_string(minutes) +"m "+ std::to_string(seconds) +"s ").c_str() };
      } else if ( hours ) {
        return { (std::to_string(hours) +"h " + std::to_string(minutes) +"m "+ std::to_string(seconds) +"s ").c_str() };
      } else if ( minutes ) {
        return { (std::to_string(minutes) +"m "+ std::to_string(seconds) +"s ").c_str() };
      } else {
        return { (std::to_string(seconds) +"s ").c_str() };
      }
    icon: mdi:clock-start
    update_interval: 113s
    
  - platform: template
    name: ${name}_remaining_time
    lambda: |-
      if(id(${name}_${bms}_current).state<0) {
        int seconds = int(id(${name}_${bms}_capacity_remaining).state*0.01*id(${name}_${bms}_total_battery_capacity_setting).state/(-id(${name}_${bms}_current).state)*(3600));
        int days = seconds / (24 * 3600);
        seconds = seconds % (24 * 3600); 
        int hours = seconds / 3600;
        seconds = seconds % 3600;
        int minutes = seconds /  60;
        seconds = seconds % 60;
        return { ("Discharging time to go: " + std::to_string(days) +"d " + std::to_string(hours) +"h " + std::to_string(minutes) +"m "+ std::to_string(seconds) +"s").c_str() };
      }
      else if(id(${name}_${bms}_current).state>0){
        int seconds = int((1.0-float(id(${name}_${bms}_capacity_remaining).state)*0.01)*float(id(${name}_${bms}_total_battery_capacity_setting).state)/float(id(${name}_${bms}_current).state)*(3600));
        int days = seconds / (24 * 3600);
        seconds = seconds % (24 * 3600); 
        int hours = seconds / 3600;
        seconds = seconds % 3600;
        int minutes = seconds /  60;
        seconds = seconds % 60;
        return { ("Charging time to go: " + std::to_string(days) +"d " + std::to_string(hours) +"h " + std::to_string(minutes) +"m "+ std::to_string(seconds) +"s").c_str() };
      }
      else{
        return {""};
      }
    icon: mdi:clock-start
    update_interval: ${text_update}  
    
  - platform: template
    name: ${name}_${inverter}_battery_type_text
    id: ${name}_${inverter}_battery_type_text 
    lambda: |-
      if (isnan(id(${name}_${inverter}_battery_type).state)) { 
        return {"KO"};
      }
      else {
        static const char *battery_list[] = {"AGn", "FLd", "USE", "PYL", "EC", "SOL"};
        return {battery_list[int(id(${name}_${inverter}_battery_type).state)]};
      }
    update_interval: ${text_update}
 
  - platform: template
    name: ${name}_${inverter}_output_source_priority_text
    id: ${name}_${inverter}_output_source_priority_text 
    lambda: |-
      if (isnan(id(${name}_${inverter}_output_source_priority).state)) { 
        return {"KO"};
      }
      else {
        static const char *sources_list[] = {"USB", "SUB", "SBU"};
        return {sources_list[int(id(${name}_${inverter}_output_source_priority).state)]};
      }
    update_interval: ${text_update}  
    
      
  # - platform: pipsolar
    # pipsolar_id: pip8048
    # device_mode:
       # id: pvbrain_axpert_device_mode
       # name: pvbrain_axpertdevice_mode
    # last_qpigs:
       # id: pvbrain_axpert_last_qpigs
       # name: pvbrain_axpert_last_qpigs
    # last_qpiri:
       # id: pvbrain_axpert_last_qpiri
       # name: pvbrain_axpert_last_qpiri  
    
    
  - platform: jk_bms
    jk_bms_id: bms1
    errors:
      name: ${name}_${bms}_errors
    operation_mode:
      name: ${name}_${bms}_operation_mode
    # battery_type:
      # name: ${name}_${bms}_battery_type
    # password:
      # name: ${name}_${bms}_password
    # device_type:
      # name: ${name}_${bms}_device_type
    # software_version:
      # name: ${name}_${bms}_software_version
    # manufacturer:
      # name: ${name}_${bms}_manufacturer  
      
      
script:
  - id: script_from_solar_to_grid
    then:
      - if:  ##### cas 1 (principal) on teste si AC_in:off, onduleur:on, ENEDIS:on => sequence solar to grid #### 
          condition:
            and:
              - binary_sensor.is_off: ${name}_${inverter}_grid_input_on
              - binary_sensor.is_on: ${name}_${inverter}_switch_on  
              - binary_sensor.is_on: ${name}_grid_230V
          then:
            - switch.turn_on: ${name}_relay_${ats}_solar_input  ### switch to grid source
            - delay: 2s
            - switch.turn_off: ${name}_relay_${inverter} ### turn off solar inverter
      # - if:  ##### cas 2 (rare) on teste si AC_in:on, onduleur:on => ####
          # condition:
            # and:
              # - binary_sensor.is_on: ${name}_${inverter}_grid_input_on
              # - binary_sensor.is_on: ${name}_${inverter}_switch_on  
          # then:
            # - switch.turn_off: ${name}_relay_${ats}_solar_input
            
  - id: script_from_grid_to_solar
    then:
      # - logger.log:
          # format: "grid_input_on %d, switch_on %d"
          # args: [ 'id(pvbrain_axpert_grid_input_on).state', 'id(pvbrain_axpert_switch_on).state' ]              
      - if:
          condition:
            and:
              - binary_sensor.is_off: ${name}_${inverter}_grid_input_on
              - binary_sensor.is_off: ${name}_${inverter}_switch_on  
 #             - binary_sensor.is_on: ${name}_solar_230V
          then:
            - switch.turn_on: ${name}_relay_${inverter}  ### turn on solar inverter
            - delay: 13s
            - switch.turn_off: ${name}_relay_${ats}_solar_input  ### switch to PV source        
select:
  - platform: pipsolar
    pipsolar_id: pip8048
    output_source_priority:
      id: ${name}_${inverter}_output_source_priority_select 
      name: ${name}_${inverter}_output_source_priority_select
      icon: mdi:numeric
      optionsmap:
        "Utility first": "POP00"
        "Solar only": "POP01"
        "Solar Battery Utility": "POP02"
      statusmap:
        "0": "Utility first"
        "1": "Solar only"
        "2": "Solar Battery Utility"
  
  # For HS: 00 for utility first, 01 for solar first, 02 for solar and utility, 03 for only solar charging
  - platform: pipsolar
    pipsolar_id: pip8048
    charger_source_priority:
      id: ${name}_${inverter}_charger_source_priority_select 
      name: ${name}_${inverter}_charger_source_priority_select
      icon: mdi:numeric
      optionsmap:
#        "Utility first": "PCP00"
        "Solar first": "PCP01"
        "Solar and utility": "PCP02"
        "Solar charging only": "PCP03"
      statusmap:
 #       "0": "Utility first"
        "1": "Solar first"
        "2": "Solar and utility"
        "3": "Solar charging only"

  - platform: pipsolar
    pipsolar_id: pip8048
    current_max_ac_charging_current:
      id: ${name}_${inverter}_current_max_ac_charging_current_select 
      name: ${name}_${inverter}_current_max_ac_charging_current_select
      icon: mdi:current-dc
      optionsmap:
        "2A": "MUCHGC0002"
        "10A": "MUCHGC0010"
        "20A": "MUCHGC0020"
        "30A": "MUCHGC0030"
        "40A": "MUCHGC0040"
        "50A": "MUCHGC0050"
        "60A": "MUCHGC0060"
        "70A": "MUCHGC0070"
        "80A": "MUCHGC0080"
        "90A": "MUCHGC0090"
        "100A": "MUCHGC0100"
        "110A": "MUCHGC0110"
        "120A": "MUCHGC0120"
      statusmap:
        "2": "2A"
        "10": "10A"
        "20": "20A"
        "30": "30A"       
        "40": "40A"
        "50": "50A"
        "60": "60A"
        "70": "70A"
        "80": "80A"
        "90": "90A"
        "100": "100A"
        "110": "110A"
        "120": "120A"

  - platform: pipsolar
    pipsolar_id: pip8048
    current_max_charging_current:
      id: ${name}_${inverter}_current_max_charging_current_select 
      name: ${name}_${inverter}_current_max_charging_current_select
      icon: mdi:current-dc
      optionsmap:
        "10A": "MCHGC010"
        "20A": "MCHGC020"
        "30A": "MCHGC030"
        "40A": "MCHGC040"
        "50A": "MCHGC050"
        "60A": "MCHGC060"
        "70A": "MCHGC070"
        "80A": "MCHGC080"
        "90A": "MCHGC090"
        "100A": "MCHGC100"
        "110A": "MCHGC110"
        "120A": "MCHGC120"
      statusmap:
        "10": "10A"
        "20": "20A"
        "30": "30A"       
        "40": "40A"
        "50": "50A"
        "60": "60A"
        "70": "70A"
        "80": "80A"
        "90": "90A"
        "100": "100A"
        "110": "110A"
        "120": "120A"      

  - platform: pipsolar
    pipsolar_id: pip8048
    charging_discharging_control:
      # See MAX_Communication_Protocol_20200526.pdf page 18
      name: ${name}_${inverter}_charging discharging_control
      optionsmap:
        "Enabled charger;Enabled discharger": "PBATCD111"
        "Enabled charger whith Grid (prog16);Disabled discharger and shut down unit": "PBATCD011"
        "Enabled charger whith Grid (prog16);Disabled discharger standby unit": "PBATCD101"
        "Disabled charger;Enabled discharger": "PBATCD110"
        "Disabled charger;Disabled discharger;Disabled discharger and shut down unit": "PBATCD010"
        "Disabled charger;Disabled discharger standby unit": "PBATCD100"
        "N/A": "PBATCD001"
        "Cleaned return to previous status": "PBATCD000"
      statusmap:
        "111": "Enabled charger;Enabled discharger"
        "011": "Enabled charger whith Grid (prog16);Disabled discharger and shut down unit"
        "101": "Enabled charger whith Grid (prog16);Disabled discharger standby unit"
        "110": "Disabled charger;Enabled discharger"
        "010": "Disabled charger;Disabled discharger;Disabled discharger and shut down unit"
        "100": "Disabled charger;Disabled discharger standby unit"
        "001": "N/A"
        "000": "Cleaned return to previous status" 